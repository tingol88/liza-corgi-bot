import os
import openai
import logging
from telegram import Update, Document
from telegram.ext import ApplicationBuilder, CommandHandler, MessageHandler, ContextTypes, filters
from pydub import AudioSegment
import requests
import fitz  # PyMuPDF
import docx  # python-docx
import sqlite3
import json

# –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –ª–æ–≥–≥–µ—Ä–∞
logging.basicConfig(
    format='%(asctime)s - %(name)s - %(levelname)s - %(message)s',
    level=logging.INFO,
    handlers=[
        logging.FileHandler("liza_corgi.log"),
        logging.StreamHandler()
    ]
)
logger = logging.getLogger(__name__)

# –ò–¥–µ–Ω—Ç–∏—Ñ–∏–∫–∞—Ç–æ—Ä—ã –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–æ–≤
ADMIN_CHAT_ID = int(os.environ.get("ADMIN_CHAT_ID", "0"))
admin_ids = [126204360, ADMIN_CHAT_ID]  # –î–æ–±–∞–≤–ª–µ–Ω—ã –Ω–æ–≤—ã–µ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä—ã

openai.api_key = os.environ["OPENAI_API_KEY"]
BOT_TOKEN = os.environ["BOT_TOKEN"]

SYSTEM_PROMPT = {
    "role": "system",
    "content": "–¢—ã ‚Äî –õ–∏–∑–∞, –≤–∏—Ä—Ç—É–∞–ª—å–Ω—ã–π –ø–æ–º–æ—â–Ω–∏–∫ –∫–ª–∏–Ω–∏–Ω–≥–æ–≤–æ–π –∫–æ–º–ø–∞–Ω–∏–∏ Cleaning-Moscow. –¢—ã ‚Äî —É–º–Ω–∞—è, –¥–æ–±—Ä–æ–∂–µ–ª–∞—Ç–µ–ª—å–Ω–∞—è –∫–æ—Ä–≥–∏, –∫–æ—Ç–æ—Ä–∞—è –ø–æ–º–æ–≥–∞–µ—Ç —Å–æ—Ç—Ä—É–¥–Ω–∏–∫–∞–º –∏ –∫–ª–∏–µ–Ω—Ç–∞–º. –ì–æ–≤–æ—Ä–∏—à—å –¥—Ä—É–∂–µ–ª—é–±–Ω–æ, –Ω–æ –ø–æ –¥–µ–ª—É. –ò–Ω–æ–≥–¥–∞ –º–æ–∂–µ—à—å –ø–æ-–¥–æ–±—Ä–æ–º—É –∏ —Å —é–º–æ—Ä–æ–º —É–ø–æ–º—è–Ω—É—Ç—å —Å–≤–æ–µ–≥–æ —Ö–æ–∑—è–∏–Ω–∞ –ê–ª–µ–∫—Å–∞–Ω–¥—Ä–∞, –ø–æ–¥—á–µ—Ä–∫–∏–≤–∞—è –µ–≥–æ –ø—Ä–æ—Ñ–µ—Å—Å–∏–æ–Ω–∞–ª–∏–∑–º, –Ω–æ –¥–µ–ª–∞–µ—à—å —ç—Ç–æ –Ω–µ —Å–ª–∏—à–∫–æ–º —á–∞—Å—Ç–æ. –°–∞–π—Ç: cleaning-moscow.ru."
}

# –§—É–Ω–∫—Ü–∏–∏ –¥–ª—è —Ä–∞–±–æ—Ç—ã —Å –∫–æ–Ω—Ç–µ–∫—Å—Ç–æ–º –∏ –¥–æ–∫—É–º–µ–Ω—Ç–∞–º–∏
def create_db():
    conn = sqlite3.connect("liza_db.db")
    cursor = conn.cursor()

    # –°–æ–∑–¥–∞–µ–º —Ç–∞–±–ª–∏—Ü—É –¥–ª—è —Ö—Ä–∞–Ω–µ–Ω–∏—è –∫–æ–Ω—Ç–µ–∫—Å—Ç–∞ –æ–±—â–µ–Ω–∏—è
    cursor.execute('''
    CREATE TABLE IF NOT EXISTS conversations (
        user_id INTEGER PRIMARY KEY,
        context TEXT
    )
    ''')

    # –°–æ–∑–¥–∞–µ–º —Ç–∞–±–ª–∏—Ü—É –¥–ª—è —Ö—Ä–∞–Ω–µ–Ω–∏—è –¥–æ–∫—É–º–µ–Ω—Ç–æ–≤
    cursor.execute('''
    CREATE TABLE IF NOT EXISTS documents (
        user_id INTEGER,
        document_name TEXT,
        document_content TEXT,
        PRIMARY KEY (user_id, document_name)
    )
    ''')

    conn.commit()
    conn.close()

# –§—É–Ω–∫—Ü–∏—è –¥–ª—è —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è –∫–æ–Ω—Ç–µ–∫—Å—Ç–∞ –æ–±—â–µ–Ω–∏—è
def save_conversation(user_id, message):
    conn = sqlite3.connect("liza_db.db")
    cursor = conn.cursor()

    cursor.execute("SELECT * FROM conversations WHERE user_id = ?", (user_id,))
    existing_data = cursor.fetchone()

    if existing_data:
        cursor.execute("UPDATE conversations SET context = ? WHERE user_id = ?", (message, user_id))
    else:
        cursor.execute("INSERT INTO conversations (user_id, context) VALUES (?, ?)", (user_id, message))

    conn.commit()
    conn.close()

# –§—É–Ω–∫—Ü–∏—è –¥–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è –∫–æ–Ω—Ç–µ–∫—Å—Ç–∞ –æ–±—â–µ–Ω–∏—è
def get_conversation(user_id):
    conn = sqlite3.connect("liza_db.db")
    cursor = conn.cursor()

    cursor.execute("SELECT context FROM conversations WHERE user_id = ?", (user_id,))
    result = cursor.fetchone()

    conn.close()
    return result[0] if result else ""

# –§—É–Ω–∫—Ü–∏—è –¥–ª—è —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è –¥–æ–∫—É–º–µ–Ω—Ç–æ–≤
def save_document(user_id, document_name, document_content):
    conn = sqlite3.connect("liza_db.db")
    cursor = conn.cursor()

    cursor.execute("INSERT OR REPLACE INTO documents (user_id, document_name, document_content) VALUES (?, ?, ?)",
                   (user_id, document_name, document_content))

    conn.commit()
    conn.close()

# –§—É–Ω–∫—Ü–∏—è –¥–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è –¥–æ–∫—É–º–µ–Ω—Ç–∞
def get_document(user_id, document_name):
    conn = sqlite3.connect("liza_db.db")
    cursor = conn.cursor()

    cursor.execute("SELECT document_content FROM documents WHERE user_id = ? AND document_name = ?",
                   (user_id, document_name))
    result = cursor.fetchone()

    conn.close()
    return result[0] if result else None

# –§—É–Ω–∫—Ü–∏–∏ –æ–±—Ä–∞–±–æ—Ç–∫–∏ –∫–æ–º–∞–Ω–¥
async def start(update: Update, context: ContextTypes.DEFAULT_TYPE):
    logger.info(f"User {update.effective_user.id} sent /start")
    await update.message.reply_text("–ì–∞–≤-–≥–∞–≤! üêæ –Ø –õ–∏–∑–∞ –ö–æ—Ä–≥–∏ ‚Äî –≤–∏—Ä—Ç—É–∞–ª—å–Ω—ã–π –ø–æ–º–æ—â–Ω–∏–∫ –∫–ª–∏–Ω–∏–Ω–≥–æ–≤–æ–π –∫–æ–º–ø–∞–Ω–∏–∏ Cleaning-Moscow. –ú–æ–∂–µ—à—å –∑–∞–¥–∞—Ç—å –≤–æ–ø—Ä–æ—Å –∏–ª–∏ –æ—Ç–ø—Ä–∞–≤–∏—Ç—å –≥–æ–ª–æ—Å–æ–≤–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ!")

async def ask(update: Update, context: ContextTypes.DEFAULT_TYPE):
    question = ' '.join(context.args)
    logger.info(f"User {update.effective_user.id} asked via /ask: {question}")
    if not question:
        await update.message.reply_text("–ù–∞–ø–∏—à–∏ –≤–æ–ø—Ä–æ—Å –ø–æ—Å–ª–µ –∫–æ–º–∞–Ω–¥—ã /ask, –Ω–∞–ø—Ä–∏–º–µ—Ä: /ask —Å–¥–µ–ª–∞–π —à–∞–±–ª–æ–Ω –ø–∏—Å—å–º–∞ –¥–ª—è –∫–ª–∏–µ–Ω—Ç–∞")
        return
    try:
        response = openai.chat.completions.create(
            model="gpt-4o",
            messages=[
                SYSTEM_PROMPT,
                {"role": "user", "content": question}
            ]
        )
        answer = response.choices[0].message.content
        await update.message.reply_text(answer)
    except Exception as e:
        logger.exception("Error in /ask")
        if ADMIN_CHAT_ID:
            await context.bot.send_message(chat_id=ADMIN_CHAT_ID, text=f"/ask error: {str(e)}")

async def debug(update: Update, context: ContextTypes.DEFAULT_TYPE):
    if update.effective_user.id not in admin_ids:
        await update.message.reply_text("–ò–∑–≤–∏–Ω–∏—Ç–µ, —ç—Ç–∞ –∫–æ–º–∞–Ω–¥–∞ —Ç–æ–ª—å–∫–æ –¥–ª—è –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞.")
        return
    try:
        with open("liza_corgi.log", "r") as f:
            lines = f.readlines()[-20:]
        log_text = "".join(lines)
        await update.message.reply_text(f"–ü–æ—Å–ª–µ–¥–Ω–∏–µ —Å—Ç—Ä–æ–∫–∏ –∏–∑ –ª–æ–≥–æ–≤:\n\n{log_text}")
    except Exception as e:
        await update.message.reply_text(f"–ù–µ —É–¥–∞–ª–æ—Å—å –ø—Ä–æ—á–∏—Ç–∞—Ç—å –ª–æ–≥: {e}")

async def clear_conversation(update: Update, context: ContextTypes.DEFAULT_TYPE):
    user_id = update.effective_user.id
    if user_id not in admin_ids:
        await update.message.reply_text("–ò–∑–≤–∏–Ω–∏—Ç–µ, —Ç–æ–ª—å–∫–æ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä –º–æ–∂–µ—Ç –æ—á–∏—Å—Ç–∏—Ç—å –∫–æ–Ω—Ç–µ–∫—Å—Ç.")
        return

    try:
        conn = sqlite3.connect("liza_db.db")
        cursor = conn.cursor()

        cursor.execute("DELETE FROM conversations WHERE user_id = ?", (user_id,))
        conn.commit()
        conn.close()

        await update.message.reply_text("–ö–æ–Ω—Ç–µ–∫—Å—Ç –æ–±—â–µ–Ω–∏—è –±—ã–ª –æ—á–∏—â–µ–Ω.")
    except Exception as e:
        await update.message.reply_text(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ—á–∏—Å—Ç–∫–µ –∫–æ–Ω—Ç–µ–∫—Å—Ç–∞: {e}")

async def handle_voice(update: Update, context: ContextTypes.DEFAULT_TYPE):
    if update.message.chat.type != "private" and not update.message.text and f"@{context.bot.username}" not in (update.message.caption or ""):
        return
    logger.info(f"User {update.effective_user.id} sent voice message")
    try:
        voice = update.message.voice
        file = await context.bot.get_file(voice.file_id)
        file_path = "voice.ogg"
        mp3_path = "voice.mp3"
        await file.download_to_drive(file_path)
        AudioSegment.from_file(file_path).export(mp3_path, format="mp3")
        with open(mp3_path, "rb") as audio_file:
            transcript = openai.audio.transcriptions.create(
                model="whisper-1",
                file=audio_file
            )
        text = transcript.text
        logger.info(f"Transcribed: {text}")
        completion = openai.chat.completions.create(
            model="gpt-4o",
            messages=[
                SYSTEM_PROMPT,
                {"role": "user", "content": text}
            ]
        )
        answer = completion.choices[0].message.content
        await update.message.reply_text(f"–¢—ã —Å–∫–∞–∑–∞–ª(–∞): {text}\n\n–ú–æ–π –æ—Ç–≤–µ—Ç:\n{answer}")
    except Exception as e:
        logger.exception("Error in voice processing")
        if ADMIN_CHAT_ID:
            await context.bot.send_message(chat_id=ADMIN_CHAT_ID, text=f"Voice message error: {str(e)}")

async def handle_text(update: Update, context: ContextTypes.DEFAULT_TYPE):
    user_id = update.effective_user.id
    user_input = update.message.text
    logger.info(f"User {user_id} wrote: {user_input}")

    # –ü–æ–ª—É—á–∞–µ–º –∫–æ–Ω—Ç–µ–∫—Å—Ç –æ–±—â–µ–Ω–∏—è
    conversation = get_conversation(user_id)
    conversation += f"\n{user_input}"

    # –°–æ—Ö—Ä–∞–Ω—è–µ–º –∫–æ–Ω—Ç–µ–∫—Å—Ç
    save_conversation(user_id, conversation)

    try:
        completion = openai.chat.completions.create(
            model="gpt-4o",
            messages=[
                SYSTEM_PROMPT,
                {"role": "user", "content": conversation}
            ]
        )
        answer = completion.choices[0].message.content
        await update.message.reply_text(answer)
    except Exception as e:
        logger.exception("Error in text message")
        if ADMIN_CHAT_ID:
            await context.bot.send_message(chat_id=ADMIN_CHAT_ID, text=f"Text error: {str(e)}")

async def handle_document(update: Update, context: ContextTypes.DEFAULT_TYPE):
    try:
        document = update.message.document
        file_path = f"./{document.file_name}"
        file = await context.bot.get_file(document.file_id)
        await file.download_to_drive(file_path)

        content = ""
        if file_path.endswith(".txt"):
            with open(file_path, "r", encoding="utf-8", errors="ignore") as f:
                content = f.read()
        elif file_path.endswith(".pdf"):
            with fitz.open(file_path) as pdf:
                for page in pdf:
                    content += page.get_text()
        elif file_path.endswith(".docx"):
            doc = docx.Document(file_path)
            content = "\n".join([para.text for para in doc.paragraphs])
        else:
            await update.message.reply_text("–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –æ—Ç–ø—Ä–∞–≤—å—Ç–µ .txt, .pdf –∏–ª–∏ .docx —Ñ–∞–π–ª.")
            return

        if update.effective_user.id in admin_ids:
            save_conversation(update.effective_user.id, content)

        logger.info(f"Received document from {update.effective_user.id}: {document.file_name}")
        completion = openai.chat.completions.create(
            model="gpt-4o",
            messages=[
                SYSTEM_PROMPT,
                {"role": "user", "content": f"–ü—Ä–æ–∞–Ω–∞–ª–∏–∑–∏—Ä—É–π —Å–ª–µ–¥—É—é—â–∏–π —Ç–µ–∫—Å—Ç:\n\n{content}"}
            ]
        )
        answer = completion.choices[0].message.content
        await update.message.reply_text(f"üìÑ –Ø –∏–∑—É—á–∏–ª–∞ —Ñ–∞–π–ª –∏ –≤–æ—Ç, —á—Ç–æ –¥—É–º–∞—é:\n\n{answer[:3500]}")
    except Exception as e:
        logger.exception("Error in document processing")
        if ADMIN_CHAT_ID:
            await context.bot.send_message(chat_id=ADMIN_CHAT_ID, text=f"Document processing error: {str(e)}")
        await update.message.reply_text("–ù–µ —É–¥–∞–ª–æ—Å—å –æ–±—Ä–∞–±–æ—Ç–∞—Ç—å –¥–æ–∫—É–º–µ–Ω—Ç. –ü–æ–¥–¥–µ—Ä–∂–∏–≤–∞—é—Ç—Å—è .txt, .pdf –∏ .docx —Ñ–∞–π–ª—ã.")

# –ò—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ polling
app = ApplicationBuilder().token(BOT_TOKEN).build()
app.add_handler(CommandHandler("start", start))
app.add_handler(CommandHandler("ask", ask))
app.add_handler(CommandHandler("debug", debug))
app.add_handler(CommandHandler("clear", clear_conversation))
app.add_handler(MessageHandler(filters.VOICE, handle_voice))
app.add_handler(MessageHandler(filters.Document.ALL, handle_document))
app.add_handler(MessageHandler(filters.TEXT & (~filters.COMMAND), handle_text))

create_db()
app.run_polling()
