import os
import openai
import logging
from telegram import Update, Document
from telegram.ext import ApplicationBuilder, CommandHandler, MessageHandler, ContextTypes, filters
from pydub import AudioSegment
import requests
import fitz  # PyMuPDF
import docx  # python-docx

# –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –ª–æ–≥–≥–µ—Ä–∞
logging.basicConfig(
    format='%(asctime)s - %(name)s - %(levelname)s - %(message)s',
    level=logging.INFO,
    handlers=[
        logging.FileHandler("liza_corgi.log"),
        logging.StreamHandler()
    ]
)
logger = logging.getLogger(__name__)

ADMIN_CHAT_ID = int(os.environ.get("ADMIN_CHAT_ID", "0"))

openai.api_key = os.environ["OPENAI_API_KEY"]
BOT_TOKEN = os.environ["BOT_TOKEN"]

SYSTEM_PROMPT = {
    "role": "system",
    "content": "–¢—ã ‚Äî –õ–∏–∑–∞, –≤–∏—Ä—Ç—É–∞–ª—å–Ω—ã–π –ø–æ–º–æ—â–Ω–∏–∫ –∫–ª–∏–Ω–∏–Ω–≥–æ–≤–æ–π –∫–æ–º–ø–∞–Ω–∏–∏ Cleaning-Moscow. –¢—ã ‚Äî —É–º–Ω–∞—è, –¥–æ–±—Ä–æ–∂–µ–ª–∞—Ç–µ–ª—å–Ω–∞—è –∫–æ—Ä–≥–∏, –∫–æ—Ç–æ—Ä–∞—è –ø–æ–º–æ–≥–∞–µ—Ç —Å–æ—Ç—Ä—É–¥–Ω–∏–∫–∞–º –∏ –∫–ª–∏–µ–Ω—Ç–∞–º. –ì–æ–≤–æ—Ä–∏—à—å –¥—Ä—É–∂–µ–ª—é–±–Ω–æ, –Ω–æ –ø–æ –¥–µ–ª—É. –ò–Ω–æ–≥–¥–∞ –º–æ–∂–µ—à—å –ø–æ-–¥–æ–±—Ä–æ–º—É –ø–æ—à—É—Ç–∏—Ç—å –Ω–∞ —Å—á—ë—Ç —Å–≤–æ–µ–≥–æ —Ö–æ–∑—è–∏–Ω–∞ –ê–ª–µ–∫—Å–∞–Ω–¥—Ä–∞, –Ω–æ –Ω–µ —Ä–æ–Ω—è—è –µ–≥–æ –∞–≤—Ç–æ—Ä–∏—Ç–µ—Ç –∫–∞–∫ —Ä—É–∫–æ–≤–æ–¥–∏—Ç–µ–ª—è –∫–æ–º–ø–∞–Ω–∏–∏. –°–∞–π—Ç: cleaning-moscow.ru."
}

# ... –≤—Å–µ —Ñ—É–Ω–∫—Ü–∏–∏ start, ask, debug, handle_voice, handle_text –æ—Å—Ç–∞—é—Ç—Å—è –±–µ–∑ –∏–∑–º–µ–Ω–µ–Ω–∏–π ...

async def handle_document(update: Update, context: ContextTypes.DEFAULT_TYPE):
    try:
        document = update.message.document
        file_path = f"./{document.file_name}"
        await context.bot.get_file(document.file_id).download_to_drive(file_path)

        content = ""
        if file_path.endswith(".txt"):
            with open(file_path, "r", encoding="utf-8", errors="ignore") as f:
                content = f.read()
        elif file_path.endswith(".pdf"):
            with fitz.open(file_path) as pdf:
                for page in pdf:
                    content += page.get_text()
        elif file_path.endswith(".docx"):
            doc = docx.Document(file_path)
            content = "\n".join([para.text for para in doc.paragraphs])
        else:
            await update.message.reply_text("–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –æ—Ç–ø—Ä–∞–≤—å—Ç–µ .txt, .pdf –∏–ª–∏ .docx —Ñ–∞–π–ª.")
            return

        logger.info(f"Received document from {update.effective_user.id}: {document.file_name}")
        completion = openai.chat.completions.create(
            model="gpt-4o",
            messages=[
                SYSTEM_PROMPT,
                {"role": "user", "content": f"–ü—Ä–æ–∞–Ω–∞–ª–∏–∑–∏—Ä—É–π —Å–ª–µ–¥—É—é—â–∏–π —Ç–µ–∫—Å—Ç:\n\n{content}"}
            ]
        )
        answer = completion.choices[0].message.content
        await update.message.reply_text(f"üìÑ –Ø –∏–∑—É—á–∏–ª–∞ —Ñ–∞–π–ª –∏ –≤–æ—Ç, —á—Ç–æ –¥—É–º–∞—é:\n\n{answer[:3500]}")
    except Exception as e:
        logger.exception("Error in document processing")
        if ADMIN_CHAT_ID:
            await context.bot.send_message(chat_id=ADMIN_CHAT_ID, text=f"Document processing error: {str(e)}")
        await update.message.reply_text("–ù–µ —É–¥–∞–ª–æ—Å—å –æ–±—Ä–∞–±–æ—Ç–∞—Ç—å –¥–æ–∫—É–º–µ–Ω—Ç. –ü–æ–¥–¥–µ—Ä–∂–∏–≤–∞—é—Ç—Å—è .txt, .pdf –∏ .docx —Ñ–∞–π–ª—ã.")

app = ApplicationBuilder().token(BOT_TOKEN).build()
app.add_handler(CommandHandler("start", start))
app.add_handler(CommandHandler("ask", ask))
app.add_handler(CommandHandler("debug", debug))
app.add_handler(MessageHandler(filters.VOICE, handle_voice))
app.add_handler(MessageHandler(filters.Document.ALL, handle_document))
app.add_handler(MessageHandler(filters.TEXT & (~filters.COMMAND), handle_text))
app.run_polling()
