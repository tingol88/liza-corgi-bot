from telegram import Update
from telegram.ext import ContextTypes
from db_utils import save_conversation, save_knowledge, find_knowledge_by_keyword
from google_connect import get_google_docs_text, get_google_sheet_values, sync_drive_folder_to_knowledge

ADMIN_IDS = [126204360]


async def start(update: Update, context: ContextTypes.DEFAULT_TYPE):
    await update.message.reply_text("–ì–∞–≤-–≥–∞–≤! üêæ –Ø –õ–∏–∑–∞ –ö–æ—Ä–≥–∏ ‚Äî –≤–∏—Ä—Ç—É–∞–ª—å–Ω—ã–π –ø–æ–º–æ—â–Ω–∏–∫ –∫–ª–∏–Ω–∏–Ω–≥–æ–≤–æ–π –∫–æ–º–ø–∞–Ω–∏–∏ Cleaning-Moscow. –ú–æ–∂–µ—à—å –∑–∞–¥–∞—Ç—å –≤–æ–ø—Ä–æ—Å –∏–ª–∏ –æ—Ç–ø—Ä–∞–≤–∏—Ç—å –≥–æ–ª–æ—Å–æ–≤–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ!")


async def help_command(update: Update, context: ContextTypes.DEFAULT_TYPE):
    help_text = (
        "üõ†Ô∏è *–ö–æ–º–∞–Ω–¥—ã –õ–∏–∑—ã*:\n\n"
        "/start ‚Äî –ü—Ä–∏–≤–µ—Ç—Å—Ç–≤–∏–µ –∏ –≤–≤–æ–¥–Ω–∞—è\n"
        "/learn ‚Äî –û–±—É—á–∏—Ç—å –õ–∏–∑—É –Ω–æ–≤–æ–º—É –∑–Ω–∞–Ω–∏—é (—Ç–æ–ª—å–∫–æ –∞–¥–º–∏–Ω)\n"
        "/ref [–∑–∞–ø—Ä–æ—Å] ‚Äî –ù–∞–π—Ç–∏ –≤ –±–∞–∑–µ –∑–Ω–∞–Ω–∏–π\n"
        "/clear ‚Äî –û—á–∏—Å—Ç–∏—Ç—å –∏—Å—Ç–æ—Ä–∏—é –æ–±—â–µ–Ω–∏—è (—Ç–æ–ª—å–∫–æ –∞–¥–º–∏–Ω)\n"
        "/help ‚Äî –ü–æ–∫–∞–∑–∞—Ç—å —ç—Ç–æ –º–µ–Ω—é\n"
    )
    await update.message.reply_text(help_text, parse_mode="Markdown")


async def learn(update: Update, context: ContextTypes.DEFAULT_TYPE):
    user_id = update.effective_user.id
    if user_id not in ADMIN_IDS:
        await update.message.reply_text("–ò–∑–≤–∏–Ω–∏—Ç–µ, —Ç–æ–ª—å–∫–æ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä –º–æ–∂–µ—Ç –æ–±—É—á–∞—Ç—å –õ–∏–∑—É.")
        return
    text = update.message.text.removeprefix("/learn").strip()
    if not text:
        await update.message.reply_text("–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, —É–∫–∞–∂–∏, —á–µ–º—É —Ç—ã —Ö–æ—á–µ—à—å –º–µ–Ω—è –Ω–∞—É—á–∏—Ç—å. –ü—Ä–∏–º–µ—Ä:\n/learn –∫–∞–∫ –º—ã —É–±–∏—Ä–∞–µ–º —Ä–µ—Å—Ç–æ—Ä–∞–Ω—ã –ø–æ—Å–ª–µ –æ—Ç–∫—Ä—ã—Ç–∏—è")
        return
    lines = text.split("\n", 1)
    title = lines[0][:100]
    content = lines[1] if len(lines) > 1 else lines[0]
    save_knowledge(title, content, user_id)
    await update.message.reply_text(f"–°–ø–∞—Å–∏–±–æ, –ê–ª–µ–∫—Å–∞–Ω–¥—Ä! –Ø –∑–∞–ø–æ–º–Ω–∏–ª–∞ –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –ø–æ–¥ –Ω–∞–∑–≤–∞–Ω–∏–µ–º: \"{title}\"")


async def reference(update: Update, context: ContextTypes.DEFAULT_TYPE):
    if not context.args:
        await update.message.reply_text("–£–∫–∞–∂–∏ –∫–ª—é—á–µ–≤–æ–µ —Å–ª–æ–≤–æ –¥–ª—è –ø–æ–∏—Å–∫–∞. –ü—Ä–∏–º–µ—Ä: /ref –æ—Ñ–∏—Å")
        return
    keyword = ' '.join(context.args)
    result = find_knowledge_by_keyword(keyword)
    if result:
        await update.message.reply_text(f"üîé –ù–∞—à–ª–∞ –≤ –±–∞–∑–µ –∑–Ω–∞–Ω–∏–π:\n\n*{result[0]}*\n\n{result[1][:3000]}", parse_mode="Markdown")
    else:
        await update.message.reply_text("–ö —Å–æ–∂–∞–ª–µ–Ω–∏—é, –Ω–∏—á–µ–≥–æ –Ω–µ –Ω–∞—à–ª–∞ –ø–æ —Ç–≤–æ–µ–º—É –∑–∞–ø—Ä–æ—Å—É. –ü–æ–ø—Ä–æ–±—É–π –¥—Ä—É–≥–æ–µ —Å–ª–æ–≤–æ –∏–ª–∏ –æ–±—É—á–∏ –º–µ–Ω—è —á–µ—Ä–µ–∑ /learn")


async def clear_conversation(update: Update, context: ContextTypes.DEFAULT_TYPE):
    user_id = update.effective_user.id
    if user_id not in ADMIN_IDS:
        await update.message.reply_text("–ò–∑–≤–∏–Ω–∏—Ç–µ, —Ç–æ–ª—å–∫–æ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä –º–æ–∂–µ—Ç –æ—á–∏—Å—Ç–∏—Ç—å –∫–æ–Ω—Ç–µ–∫—Å—Ç.")
        return
    from db_utils import sqlite3
    try:
        conn = sqlite3.connect("liza_db.db")
        cursor = conn.cursor()
        cursor.execute("DELETE FROM conversations WHERE user_id = ?", (user_id,))
        conn.commit()
        conn.close()
        await update.message.reply_text("–ö–æ–Ω—Ç–µ–∫—Å—Ç –æ–±—â–µ–Ω–∏—è –±—ã–ª –æ—á–∏—â–µ–Ω.")
    except Exception as e:
        await update.message.reply_text(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ—á–∏—Å—Ç–∫–µ –∫–æ–Ω—Ç–µ–∫—Å—Ç–∞: {e}")


async def google_doc(update: Update, context: ContextTypes.DEFAULT_TYPE):
    if update.effective_user.id not in ADMIN_IDS:
        await update.message.reply_text("–ò–∑–≤–∏–Ω–∏—Ç–µ, —Ç–æ–ª—å–∫–æ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä –º–æ–∂–µ—Ç –∑–∞–≥—Ä—É–∂–∞—Ç—å –¥–æ–∫—É–º–µ–Ω—Ç—ã.")
        return
    if not context.args:
        await update.message.reply_text("–£–∫–∞–∂–∏ ID Google –î–æ–∫—É–º–µ–Ω—Ç–∞. –ü—Ä–∏–º–µ—Ä: /doc 1A2B3C4D5E6F...")
        return
    try:
        doc_id = context.args[0]
        content = get_google_docs_text(doc_id)
        save_conversation(update.effective_user.id, content)
        await update.message.reply_text("üìÑ –î–æ–∫—É–º–µ–Ω—Ç –ø—Ä–æ—á–∏—Ç–∞–Ω –∏ –¥–æ–±–∞–≤–ª–µ–Ω –≤ –±–∞–∑—É –∑–Ω–∞–Ω–∏–π.")
    except Exception as e:
        await update.message.reply_text(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–≥—Ä—É–∑–∫–µ –¥–æ–∫—É–º–µ–Ω—Ç–∞: {e}")


async def google_sheet(update: Update, context: ContextTypes.DEFAULT_TYPE):
    if update.effective_user.id not in ADMIN_IDS:
        await update.message.reply_text("–ò–∑–≤–∏–Ω–∏—Ç–µ, —Ç–æ–ª—å–∫–æ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä –º–æ–∂–µ—Ç –∑–∞–≥—Ä—É–∂–∞—Ç—å —Ç–∞–±–ª–∏—Ü—ã.")
        return
    if len(context.args) < 2:
        await update.message.reply_text("–§–æ—Ä–º–∞—Ç: /sheet <SPREADSHEET_ID> <RANGE>. –ü—Ä–∏–º–µ—Ä: /sheet 1A2B3C Range1!A1:E10")
        return
    try:
        sheet_id = context.args[0]
        sheet_range = " ".join(context.args[1:])
        rows = get_google_sheet_values(sheet_id, sheet_range)
        content = "\n".join([", ".join(row) for row in rows])
        save_conversation(update.effective_user.id, content)
        await update.message.reply_text("üìä –¢–∞–±–ª–∏—Ü–∞ –æ–±—Ä–∞–±–æ—Ç–∞–Ω–∞ –∏ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∞!")
    except Exception as e:
        await update.message.reply_text(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–≥—Ä—É–∑–∫–µ —Ç–∞–±–ª–∏—Ü—ã: {e}")


async def sync_folder(update: Update, context: ContextTypes.DEFAULT_TYPE):
    user_id = update.effective_user.id
    if user_id not in ADMIN_IDS:
        await update.message.reply_text("‚õî –¢–æ–ª—å–∫–æ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä –º–æ–∂–µ—Ç –∑–∞–ø—É—Å–∫–∞—Ç—å —Å–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∞—Ü–∏—é.")
        return
    if not context.args:
        await update.message.reply_text("–£–∫–∞–∂–∏ ID –ø–∞–ø–∫–∏ Google –î–∏—Å–∫–∞. –ü—Ä–∏–º–µ—Ä: /sync 1AbcDEF456...")
        return
    folder_id = context.args[0]
    try:
        sync_drive_folder_to_knowledge(folder_id)
        await update.message.reply_text("üìÅ –ü–∞–ø–∫–∞ —Å–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∏—Ä–æ–≤–∞–Ω–∞! –í—Å–µ —Ñ–∞–π–ª—ã –¥–æ–±–∞–≤–ª–µ–Ω—ã –≤ –±–∞–∑—É –∑–Ω–∞–Ω–∏–π.")
    except Exception as e:
        await update.message.reply_text(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ —Å–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∞—Ü–∏–∏: {e}")

async def debug_knowledge(update: Update, context: ContextTypes.DEFAULT_TYPE):
    if update.effective_user.id not in ADMIN_IDS:
        await update.message.reply_text("‚õî –¢–æ–ª—å–∫–æ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä –º–æ–∂–µ—Ç –∏—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å –æ—Ç–ª–∞–¥–∫—É.")
        return

    import sqlite3
    conn = sqlite3.connect("liza_db.db")
    cursor = conn.cursor()
    cursor.execute("SELECT title, content, timestamp FROM knowledge ORDER BY timestamp DESC LIMIT 5")
    rows = cursor.fetchall()
    conn.close()

    if not rows:
        await update.message.reply_text("üì≠ –ë–∞–∑–∞ –∑–Ω–∞–Ω–∏–π –ø—É—Å—Ç–∞.")
        return

    msg = "üß† *–ü–æ—Å–ª–µ–¥–Ω–∏–µ –∑–Ω–∞–Ω–∏—è –≤ –±–∞–∑–µ:*\n\n"
    for i, (title, content, ts) in enumerate(rows, 1):
        short = content.strip().replace('\n', ' ')[:120]
        msg += f"{i}. *{title}* ({ts[:19]})\n_{short}_\n\n"

    await update.message.reply_text(msg, parse_mode="Markdown")

