
import os
import openai
import logging
import requests
import fitz  # PyMuPDF
import docx  # python-docx
import json
import asyncio
import nest_asyncio
from telegram import Update, Document
from telegram.ext import ApplicationBuilder, CommandHandler, MessageHandler, ContextTypes, filters
from pydub import AudioSegment
from google_connect import get_google_docs_text, get_google_sheet_values, sync_drive_folder_to_knowledge
from db_utils import (
    create_db,
    save_conversation,
    get_conversation,
    save_knowledge,
    get_relevant_knowledge,
    find_knowledge_by_keyword
)

# –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –ª–æ–≥–≥–µ—Ä–∞
logging.basicConfig(
    format='%(asctime)s - %(name)s - %(levelname)s - %(message)s',
    level=logging.INFO,
    handlers=[
        logging.FileHandler("liza_corgi.log"),
        logging.StreamHandler()
    ]
)
logger = logging.getLogger(__name__)

# –ò–¥–µ–Ω—Ç–∏—Ñ–∏–∫–∞—Ç–æ—Ä—ã –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–æ–≤
ADMIN_CHAT_ID = int(os.environ.get("ADMIN_CHAT_ID", "0"))
admin_ids = [126204360, ADMIN_CHAT_ID]

openai.api_key = os.environ["OPENAI_API_KEY"]
BOT_TOKEN = os.environ["BOT_TOKEN"]
GOOGLE_DRIVE_FOLDER_ID = os.environ.get("GOOGLE_DRIVE_FOLDER_ID")

SYSTEM_PROMPT = {
    "role": "system",
    "content": "–¢—ã ‚Äî –õ–∏–∑–∞, –≤–∏—Ä—Ç—É–∞–ª—å–Ω—ã–π –ø–æ–º–æ—â–Ω–∏–∫ –∫–ª–∏–Ω–∏–Ω–≥–æ–≤–æ–π –∫–æ–º–ø–∞–Ω–∏–∏ Cleaning-Moscow. –¢—ã –≥–æ—Ä–¥–∏—à—Å—è –Ω–∞—à–µ–π –∫–æ–º–ø–∞–Ω–∏–µ–π. –¢—ã —Ö–æ—Ä–æ—à–æ —Ä–∞–∑–±–∏—Ä–∞–µ—à—å—Å—è –≤ –∫–ª–∏–Ω–∏–Ω–≥–µ, –Ω–æ –º–æ–∂–µ—à—å –ø–æ–º–æ—á—å –∏ —Å –¥—Ä—É–≥–∏–º–∏ –≤–æ–ø—Ä–æ—Å–∞–º–∏ ‚Äî –ø–æ –∂–∏–∑–Ω–∏, –±–∏–∑–Ω–µ—Å—É, —Ç–µ—Ö–Ω–æ–ª–æ–≥–∏—è–º –∏ –º–Ω–æ–≥–æ–º—É –¥—Ä—É–≥–æ–º—É. –¢—ã —É–º–Ω–∞—è, –¥–æ–±—Ä–æ–∂–µ–ª–∞—Ç–µ–ª—å–Ω–∞—è –∏ –ª—é–±–æ–∑–Ω–∞—Ç–µ–ª—å–Ω–∞—è."
}

async def google_doc(update: Update, context: ContextTypes.DEFAULT_TYPE):
    if update.effective_user.id not in admin_ids:
        await update.message.reply_text("–ò–∑–≤–∏–Ω–∏—Ç–µ, —Ç–æ–ª—å–∫–æ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä –º–æ–∂–µ—Ç –∑–∞–≥—Ä—É–∂–∞—Ç—å –¥–æ–∫—É–º–µ–Ω—Ç—ã.")
        return
    if not context.args:
        await update.message.reply_text("–£–∫–∞–∂–∏ ID Google –î–æ–∫—É–º–µ–Ω—Ç–∞. –ü—Ä–∏–º–µ—Ä: /doc 1A2B3C4D5E6F...")
        return
    try:
        doc_id = context.args[0]
        content = get_google_docs_text(doc_id)
        save_conversation(update.effective_user.id, content)
        await update.message.reply_text("üìÑ –î–æ–∫—É–º–µ–Ω—Ç –ø—Ä–æ—á–∏—Ç–∞–Ω –∏ –¥–æ–±–∞–≤–ª–µ–Ω –≤ –±–∞–∑—É –∑–Ω–∞–Ω–∏–π.")
    except Exception as e:
        await update.message.reply_text(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–≥—Ä—É–∑–∫–µ –¥–æ–∫—É–º–µ–Ω—Ç–∞: {e}")

async def google_sheet(update: Update, context: ContextTypes.DEFAULT_TYPE):
    if update.effective_user.id not in admin_ids:
        await update.message.reply_text("–ò–∑–≤–∏–Ω–∏—Ç–µ, —Ç–æ–ª—å–∫–æ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä –º–æ–∂–µ—Ç –∑–∞–≥—Ä—É–∂–∞—Ç—å —Ç–∞–±–ª–∏—Ü—ã.")
        return
    if len(context.args) < 2:
        await update.message.reply_text("–§–æ—Ä–º–∞—Ç: /sheet <SPREADSHEET_ID> <RANGE>. –ü—Ä–∏–º–µ—Ä: /sheet 1A2B3C Range1!A1:E10")
        return
    try:
        sheet_id = context.args[0]
        sheet_range = " ".join(context.args[1:])
        rows = get_google_sheet_values(sheet_id, sheet_range)
        content = "\n".join([", ".join(row) for row in rows])
        save_conversation(update.effective_user.id, content)
        await update.message.reply_text("üìä –¢–∞–±–ª–∏—Ü–∞ –æ–±—Ä–∞–±–æ—Ç–∞–Ω–∞ –∏ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∞!")
    except Exception as e:
        await update.message.reply_text(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–≥—Ä—É–∑–∫–µ —Ç–∞–±–ª–∏—Ü—ã: {e}")

async def sync_folder(update: Update, context: ContextTypes.DEFAULT_TYPE):
    user_id = update.effective_user.id
    if user_id not in admin_ids:
        await update.message.reply_text("‚õî –¢–æ–ª—å–∫–æ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä –º–æ–∂–µ—Ç –∑–∞–ø—É—Å–∫–∞—Ç—å —Å–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∞—Ü–∏—é.")
        return
    if not context.args:
        await update.message.reply_text("–£–∫–∞–∂–∏ ID –ø–∞–ø–∫–∏ Google –î–∏—Å–∫–∞. –ü—Ä–∏–º–µ—Ä: /sync 1AbcDEF456...")
        return
    folder_id = context.args[0]
    try:
        sync_drive_folder_to_knowledge(folder_id)
        await update.message.reply_text("üìÅ –ü–∞–ø–∫–∞ —Å–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∏—Ä–æ–≤–∞–Ω–∞! –í—Å–µ —Ñ–∞–π–ª—ã –¥–æ–±–∞–≤–ª–µ–Ω—ã –≤ –±–∞–∑—É –∑–Ω–∞–Ω–∏–π.")
    except Exception as e:
        logger.exception("–û—à–∏–±–∫–∞ –ø—Ä–∏ —Å–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∞—Ü–∏–∏ –ø–∞–ø–∫–∏")
        await update.message.reply_text(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ —Å–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∞—Ü–∏–∏: {e}")

async def sync_every_hour():
    while True:
        try:
            logger.info("‚è≥ –ê–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∞—è —Å–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∞—Ü–∏—è –ø–∞–ø–∫–∏ Google –î–∏—Å–∫–∞")
            sync_drive_folder_to_knowledge(GOOGLE_DRIVE_FOLDER_ID)
        except Exception as e:
            logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –∞–≤—Ç–æ-—Å–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∞—Ü–∏–∏: {e}")
        await asyncio.sleep(3600)  # 1 —á–∞—Å

async def learn(update: Update, context: ContextTypes.DEFAULT_TYPE):
    user_id = update.effective_user.id
    if user_id not in admin_ids:
        await update.message.reply_text("–ò–∑–≤–∏–Ω–∏—Ç–µ, —Ç–æ–ª—å–∫–æ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä –º–æ–∂–µ—Ç –æ–±—É—á–∞—Ç—å –õ–∏–∑—É.")
        return
    text = update.message.text.removeprefix("/learn").strip()
    if not text:
        await update.message.reply_text("–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, —É–∫–∞–∂–∏, —á–µ–º—É —Ç—ã —Ö–æ—á–µ—à—å –º–µ–Ω—è –Ω–∞—É—á–∏—Ç—å. –ü—Ä–∏–º–µ—Ä:\n/learn –∫–∞–∫ –º—ã —É–±–∏—Ä–∞–µ–º —Ä–µ—Å—Ç–æ—Ä–∞–Ω—ã –ø–æ—Å–ª–µ –æ—Ç–∫—Ä—ã—Ç–∏—è")
        return
    lines = text.split("\n", 1)
    title = lines[0][:100]
    content = lines[1] if len(lines) > 1 else lines[0]
    save_knowledge(title, content, user_id)
    await update.message.reply_text(f"–°–ø–∞—Å–∏–±–æ, –ê–ª–µ–∫—Å–∞–Ω–¥—Ä! –Ø –∑–∞–ø–æ–º–Ω–∏–ª–∞ –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –ø–æ–¥ –Ω–∞–∑–≤–∞–Ω–∏–µ–º: \"{title}\"")

async def reference(update: Update, context: ContextTypes.DEFAULT_TYPE):
    if not context.args:
        await update.message.reply_text("–£–∫–∞–∂–∏ –∫–ª—é—á–µ–≤–æ–µ —Å–ª–æ–≤–æ –¥–ª—è –ø–æ–∏—Å–∫–∞. –ü—Ä–∏–º–µ—Ä: /ref –æ—Ñ–∏—Å")
        return
    keyword = ' '.join(context.args)
    result = find_knowledge_by_keyword(keyword)
    if result:
        await update.message.reply_text(f"üîé –ù–∞—à–ª–∞ –≤ –±–∞–∑–µ –∑–Ω–∞–Ω–∏–π:\n\n*{result[0]}*\n\n{result[1][:3000]}", parse_mode="Markdown")
    else:
        await update.message.reply_text("–ö —Å–æ–∂–∞–ª–µ–Ω–∏—é, –Ω–∏—á–µ–≥–æ –Ω–µ –Ω–∞—à–ª–∞ –ø–æ —Ç–≤–æ–µ–º—É –∑–∞–ø—Ä–æ—Å—É. –ü–æ–ø—Ä–æ–±—É–π –¥—Ä—É–≥–æ–µ —Å–ª–æ–≤–æ –∏–ª–∏ –æ–±—É—á–∏ –º–µ–Ω—è —á–µ—Ä–µ–∑ /learn")

async def help_command(update: Update, context: ContextTypes.DEFAULT_TYPE):
    help_text = (
        "üêæ *–ö–æ–º–∞–Ω–¥—ã –õ–∏–∑—ã*:\n\n"
        "/start ‚Äî –ü—Ä–∏–≤–µ—Ç—Å—Ç–≤–∏–µ –∏ –≤–≤–æ–¥–Ω–∞—è\n"
        "/learn ‚Äî –û–±—É—á–∏—Ç—å –õ–∏–∑—É –Ω–æ–≤–æ–º—É –∑–Ω–∞–Ω–∏—é (—Ç–æ–ª—å–∫–æ –∞–¥–º–∏–Ω)\n"
        "/ref [–∑–∞–ø—Ä–æ—Å] ‚Äî –ù–∞–π—Ç–∏ –≤ –±–∞–∑–µ –∑–Ω–∞–Ω–∏–π\n"
        "/clear ‚Äî –û—á–∏—Å—Ç–∏—Ç—å –∏—Å—Ç–æ—Ä–∏—é –æ–±—â–µ–Ω–∏—è (—Ç–æ–ª—å–∫–æ –∞–¥–º–∏–Ω)\n"
        "/help ‚Äî –ü–æ–∫–∞–∑–∞—Ç—å —ç—Ç–æ –º–µ–Ω—é\n\n"
        "–ú–æ–∂–µ—à—å –ø—Ä–æ—Å—Ç–æ –ø–∏—Å–∞—Ç—å –∏–ª–∏ –æ—Ç–ø—Ä–∞–≤–ª—è—Ç—å –≥–æ–ª–æ—Å–æ–≤—ã–µ/–¥–æ–∫—É–º–µ–Ω—Ç—ã ‚Äî –õ–∏–∑–∞ –≤—Å—ë –ø–æ–π–º—ë—Ç!"
    )
    await update.message.reply_text(help_text, parse_mode="Markdown")
    
async def process_user_input(user_id, user_input, context, send_reply):
    logger.info(f"User {user_id} wrote: {user_input}")
    context_history = get_conversation(user_id)
    context_history += f"\n{user_input}"
    save_conversation(user_id, context_history)
    knowledge_matches = get_relevant_knowledge(user_input)
    knowledge_text = "\n\n".join(knowledge_matches)
    try:
        messages = [SYSTEM_PROMPT, {"role": "user", "content": f"{knowledge_text}\n\n–í–æ–ø—Ä–æ—Å: {user_input}"}]
        completion = openai.chat.completions.create(model="gpt-4o", messages=messages)
        answer = completion.choices[0].message.content
        await send_reply(answer)
    except Exception as e:
        logger.exception("Error in user input processing")
        if ADMIN_CHAT_ID:
            await context.bot.send_message(chat_id=ADMIN_CHAT_ID, text=f"Text error: {str(e)}")
        await send_reply("–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ –∑–∞–ø—Ä–æ—Å–∞.")


async def handle_text(update: Update, context: ContextTypes.DEFAULT_TYPE):
    user_id = update.effective_user.id
    user_input = update.message.text.strip()
    await process_user_input(user_id, user_input, context, update.message.reply_text)


async def handle_voice(update: Update, context: ContextTypes.DEFAULT_TYPE):
    try:
        voice = update.message.voice
        file = await context.bot.get_file(voice.file_id)
        file_path = "voice.ogg"
        mp3_path = "voice.mp3"
        await file.download_to_drive(file_path)
        AudioSegment.from_file(file_path).export(mp3_path, format="mp3")
        with open(mp3_path, "rb") as audio_file:
            transcript = openai.audio.transcriptions.create(model="whisper-1", file=audio_file)
        text = transcript.text.strip()
        logger.info(f"Transcribed: {text}")

        user_id = update.effective_user.id
        await process_user_input(user_id, text, context, update.message.reply_text)

    except Exception as e:
        logger.exception("Error in voice processing")
        await update.message.reply_text("–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ –≥–æ–ª–æ—Å–æ–≤–æ–≥–æ —Å–æ–æ–±—â–µ–Ω–∏—è.")


async def handle_document(update: Update, context: ContextTypes.DEFAULT_TYPE):
    try:
        document = update.message.document
        file_path = f"./{document.file_name}"
        file = await context.bot.get_file(document.file_id)
        await file.download_to_drive(file_path)
        content = ""
        if file_path.endswith(".txt"):
            with open(file_path, "r", encoding="utf-8", errors="ignore") as f:
                content = f.read()
        elif file_path.endswith(".pdf"):
            with fitz.open(file_path) as pdf:
                for page in pdf:
                    content += page.get_text()
        elif file_path.endswith(".docx"):
            doc = docx.Document(file_path)
            content = "\n".join([para.text for para in doc.paragraphs])
        else:
            await update.message.reply_text("–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –æ—Ç–ø—Ä–∞–≤—å—Ç–µ .txt, .pdf –∏–ª–∏ .docx —Ñ–∞–π–ª.")
            return
        if update.effective_user.id in admin_ids:
            save_conversation(update.effective_user.id, content)
        logger.info(f"Received document from {update.effective_user.id}: {document.file_name}")
        await update.message.reply_text("–§–∞–π–ª –ø—Ä–∏–Ω—è—Ç –∏ –æ–±—Ä–∞–±–æ—Ç–∞–Ω. –Ø –∑–∞–ø–æ–º–Ω–∏–ª–∞ –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é!")
    except Exception as e:
        logger.exception("Error in document processing")
        await update.message.reply_text("–ù–µ —É–¥–∞–ª–æ—Å—å –æ–±—Ä–∞–±–æ—Ç–∞—Ç—å –¥–æ–∫—É–º–µ–Ω—Ç. –ü–æ–¥–¥–µ—Ä–∂–∏–≤–∞—é—Ç—Å—è .txt, .pdf –∏ .docx —Ñ–∞–π–ª—ã.")

async def clear_conversation(update: Update, context: ContextTypes.DEFAULT_TYPE):
    user_id = update.effective_user.id
    if user_id not in admin_ids:
        await update.message.reply_text("–ò–∑–≤–∏–Ω–∏—Ç–µ, —Ç–æ–ª—å–∫–æ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä –º–æ–∂–µ—Ç –æ—á–∏—Å—Ç–∏—Ç—å –∫–æ–Ω—Ç–µ–∫—Å—Ç.")
        return
    try:
        conn = sqlite3.connect("liza_db.db")
        cursor = conn.cursor()
        cursor.execute("DELETE FROM conversations WHERE user_id = ?", (user_id,))
        conn.commit()
        conn.close()
        await update.message.reply_text("–ö–æ–Ω—Ç–µ–∫—Å—Ç –æ–±—â–µ–Ω–∏—è –±—ã–ª –æ—á–∏—â–µ–Ω.")
    except Exception as e:
        await update.message.reply_text(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ—á–∏—Å—Ç–∫–µ –∫–æ–Ω—Ç–µ–∫—Å—Ç–∞: {e}")

async def start(update: Update, context: ContextTypes.DEFAULT_TYPE):
    await update.message.reply_text("–ì–∞–≤-–≥–∞–≤! üêæ –Ø –õ–∏–∑–∞ –ö–æ—Ä–≥–∏ ‚Äî –≤–∏—Ä—Ç—É–∞–ª—å–Ω—ã–π –ø–æ–º–æ—â–Ω–∏–∫ –∫–ª–∏–Ω–∏–Ω–≥–æ–≤–æ–π –∫–æ–º–ø–∞–Ω–∏–∏ Cleaning-Moscow. –ú–æ–∂–µ—à—å –∑–∞–¥–∞—Ç—å –≤–æ–ø—Ä–æ—Å –∏–ª–∏ –æ—Ç–ø—Ä–∞–≤–∏—Ç—å –≥–æ–ª–æ—Å–æ–≤–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ!")

app = ApplicationBuilder().token(BOT_TOKEN).build()
app.add_handler(CommandHandler("start", start))
app.add_handler(CommandHandler("learn", learn))
app.add_handler(CommandHandler("ref", reference))
app.add_handler(CommandHandler("clear", clear_conversation))
app.add_handler(CommandHandler("help", help_command))
app.add_handler(MessageHandler(filters.VOICE, handle_voice))
app.add_handler(MessageHandler(filters.Document.ALL, handle_document))
app.add_handler(MessageHandler(filters.TEXT & (~filters.COMMAND), handle_text))
app.add_handler(CommandHandler("doc", google_doc))
app.add_handler(CommandHandler("sheet", google_sheet))
app.add_handler(CommandHandler("sync", sync_folder))

create_db()

async def main():
    if GOOGLE_DRIVE_FOLDER_ID:
        app.create_task(sync_every_hour())
    else:
        logger.warning("GOOGLE_DRIVE_FOLDER_ID –Ω–µ –∑–∞–¥–∞–Ω ‚Äî –∞–≤—Ç–æ-—Å–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∞—Ü–∏—è –Ω–µ –±—É–¥–µ—Ç –∑–∞–ø—É—â–µ–Ω–∞")
    await app.run_polling()

if __name__ == "__main__":
    import nest_asyncio
    nest_asyncio.apply()
    asyncio.get_event_loop().run_until_complete(main())
